<Workspace Category="Honeybee.00 :: Create" Description="Honeybee Window Group
A window group is a group of HBWindow surfaces which will be grouped together
for 3-phase daylight analysis. View matrix will be calculated for all the Window
surfaces in a group once. Window surfaces in a group shoudl have the same normal
direction, and same BSDF materials will be assigned to all the windows in this
group.
-" ID="62ba4dc7-fcc0-4fe3-a9ee-d5e1af974f99" Name="Honeybee Window Group" Version="1.2.0.2690" X="400" Y="-100" zoom="0.5">
  <NamespaceResolutionMap/>
  <Elements>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="&quot;Honeybee&quot;;&#xA;&quot;hbwingroup_node.py&quot;;" ShouldFocus="false" guid="407b3898-2aa8-4988-bf32-c05c3d2a8a9a" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="input python script" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="-750" y="390"/>
    <PythonNodeModels.PythonNode guid="2fdac193-a2e7-4e01-bd3b-addf7f8fc50b" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="import and prepare py code" type="PythonNodeModels.PythonNode" x="-355" y="385">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Find packages from Dynamo folder and prepare the code.&quot;&quot;&quot;
import clr
from System import AppDomain, Environment, IO

def tryGetPluginPath(plugin):
    &quot;&quot;&quot;Try to get path to plugin folder.&quot;&quot;&quot;
    clr.AddReference('ProtoGeometry')
    _loc = tuple(a.Location
                 for a in AppDomain.CurrentDomain.GetAssemblies()
                 if 'ProtoGeometry' in a.FullName)

    try:
        _ver = float(_loc[0].split('\\')[-2])
    except:
        _ver = float(_loc[0].split('\\')[-2].split(' ')[-1])

    assert _ver &gt;= 1.2, 'You need Dynamo 1.2 or higher to use this plugin!'

    _appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
    _dynamoPath = ('\\').join(_loc[0].split('\\')[-4:-1])
    # if the assembly is cached put Revit folder first, and then try to load it from core
    _dynamoPaths = (_dynamoPath.replace('Dynamo Core', 'Dynamo Revit'),
                    _dynamoPath.replace('Dynamo Revit', 'Dynamo Core'))
    _settingsFilename = 'DynamoSettings.xml'

    pkf = []
    for path in _dynamoPaths:
        settingsFile = IO.Path.Combine(_appdata, path, _settingsFilename)
        if IO.File.Exists(settingsFile):
            with open(settingsFile, 'rb') as outf:
                for line in outf:
                    if line.strip().startswith('&lt;CustomPackageFolders&gt;'):
                        for l in outf:
                            if l.strip().startswith('&lt;/CustomPackageFolders&gt;'):
                                break
                            else:
                                pkf.append(l.replace('&lt;/string&gt;', '').replace('&lt;string&gt;', '').strip())

    for p in pkf:
        pp = IO.Path.Combine(p, 'packages', plugin, 'extra')
        # In case of custom folders user may put honeybee under the root folder
        ppp = IO.Path.Combine(p, plugin, 'extra')
        if IO.Directory.Exists(pp):
            return pp
        elif IO.Directory.Exists(ppp):
            return ppp


try:
    plugin, filename = IN

    p = tryGetPluginPath(plugin)

    if not p:
        raise ImportError('{} is not installed! Install it from package manager.'.format(plugin))

	# import the file and wrap it into sys.append
    f = IO.Path.Combine(p, 'nodesrc', filename)
    with open(f, 'rb') as inf:
        source = '    '.join(inf.readlines())

    header = 'try:\n    import sys\n' + \
        '    sys.path.append(r\'{}\')\n\n'.format(p) + \
        '    sys.path.append(r\'C:\Program Files (x86)\IronPython 2.7\Lib\')\n\n' + \
        '    '

    footer = '\nexcept Exception, e:\n' + \
        '    import traceback\n' + \
        '    OUT = &quot;ERROR:\\n\\t{}&quot;.format(str(e)) + \\\n' + \
        '    &quot;\\n\\nIf you think this is a bug submit an issue on github.\\n&quot; + \\\n' + \
        '    &quot;https://github.com/ladybug-tools/honeybee-dynamo/issues\\n&quot; +  \\\n' + \
        '    &quot;and include below error message:\\n\\n&quot; + \\\n' + \
        '    &quot;{}&quot;.format(traceback.format_exc())\n'

    OUT = header + source + footer

except Exception, e:
    import sys
    sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')
    import traceback
    OUT = &quot;ERROR:\n\t{}&quot;.format(str(e)) + \
        &quot;\n\nIf you think this is a bug submit an issue on github.\n&quot; + \
        &quot;https://github.com/ladybug-tools/honeybee-dynamo/issues\n&quot; +  \
        &quot;and include below error message:\n\n&quot; + \
        &quot;{}&quot;.format(traceback.format_exc())

      </Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonStringNode guid="794d16bc-663c-4439-bce3-11a2765516c0" inputcount="5" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="core" type="PythonNodeModels.PythonStringNode" x="-75" y="460">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <PortInfo default="false" index="2"/>
      <PortInfo default="false" index="3"/>
      <PortInfo default="false" index="4"/>
    </PythonNodeModels.PythonStringNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="cc929219-bb1a-4ad7-a672-1015d5cc291a" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_geo" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="475">
      <Symbol value="// A list of input geometry.&#xD;&#xA;_geo: Autodesk.Geometry[];"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="40d73f13-eb4a-4bb3-9f00-11dcee155855" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_name" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="570">
      <Symbol value="// A name for this window group. You can use this name later to add&#xD;&#xA;// or remove this group contribution to 3-Phase analysis.&#xD;&#xA;_name: string;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="12f9f3da-e5c7-499c-a586-feb2fd187d45" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="radMat_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="665">
      <Symbol value="// A Radiance material. If radiance matrial is not provided the&#xD;&#xA;// component will use the type to assign the default material&#xD;&#xA;// (%60 transmittance)for the surface.&#xD;&#xA;radMat_: var = null;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="bdf91aef-a8bc-4255-a036-1a69d97395eb" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="states_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="760">
      <Symbol value="// A list of HBWindow surfaces by similar normal direction.&#xD;&#xA;states_: var[] = {};"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="out[0];" ShouldFocus="false" guid="09b3d49b-502a-40b3-b5f3-0e8c83353801" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="decompose outputs" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="150" y="515"/>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="75fad8af-8c91-4163-8941-39ba5c0c3414" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="HBWinGroup" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="475">
      <Symbol value="// List of HBWindowsSrf for this window group.&#xD;&#xA;HBWinGroup;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="34e07f22-4325-47c8-98a3-f5493136b13e" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="Error report" type="PythonNodeModels.PythonNode" x="150" y="380">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Report errors&quot;&quot;&quot;
importErr, runErr = IN
errors = []

if importErr and str(importErr).startswith(&quot;ERROR:&quot;):
    errors.append(importErr)

if runErr and str(runErr).startswith(&quot;ERROR:&quot;):
    errors.append(runErr)

if len(errors)==0:
    OUT = &quot;All good! Vvizzzz.&quot;
else:
    OUT = &quot;\n&quot;.join(errors)

      </Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="30f71454-466d-42b4-bd8a-10435c036530" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="ERRReport" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="380">
      <Symbol value="// Report&#xD;&#xA;ERRReport;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel end="2fdac193-a2e7-4e01-bd3b-addf7f8fc50b" end_index="0" portType="0" start="407b3898-2aa8-4988-bf32-c05c3d2a8a9a" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2fdac193-a2e7-4e01-bd3b-addf7f8fc50b" end_index="1" portType="0" start="407b3898-2aa8-4988-bf32-c05c3d2a8a9a" start_index="1"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="794d16bc-663c-4439-bce3-11a2765516c0" end_index="0" portType="0" start="2fdac193-a2e7-4e01-bd3b-addf7f8fc50b" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="794d16bc-663c-4439-bce3-11a2765516c0" end_index="1" portType="0" start="cc929219-bb1a-4ad7-a672-1015d5cc291a" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="794d16bc-663c-4439-bce3-11a2765516c0" end_index="2" portType="0" start="40d73f13-eb4a-4bb3-9f00-11dcee155855" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="794d16bc-663c-4439-bce3-11a2765516c0" end_index="3" portType="0" start="12f9f3da-e5c7-499c-a586-feb2fd187d45" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="794d16bc-663c-4439-bce3-11a2765516c0" end_index="4" portType="0" start="bdf91aef-a8bc-4255-a036-1a69d97395eb" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="09b3d49b-502a-40b3-b5f3-0e8c83353801" end_index="0" portType="0" start="794d16bc-663c-4439-bce3-11a2765516c0" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="75fad8af-8c91-4163-8941-39ba5c0c3414" end_index="0" portType="0" start="09b3d49b-502a-40b3-b5f3-0e8c83353801" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="34e07f22-4325-47c8-98a3-f5493136b13e" end_index="0" portType="0" start="2fdac193-a2e7-4e01-bd3b-addf7f8fc50b" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="34e07f22-4325-47c8-98a3-f5493136b13e" end_index="1" portType="0" start="794d16bc-663c-4439-bce3-11a2765516c0" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="30f71454-466d-42b4-bd8a-10435c036530" end_index="0" portType="0" start="34e07f22-4325-47c8-98a3-f5493136b13e" start_index="0"/>
  </Connectors>
  <Notes/>
  <Annotations/>
  <Presets/>
  <Cameras>
    <Camera Name="Background Preview" eyeX="-34.00" eyeY="-34.00" eyeZ="21.19" lookX="-14.19" lookY="-43.06" lookZ="-41.65" upX="-0.17" upY="0.85" upZ="-0.50"/>
  </Cameras>
</Workspace>
