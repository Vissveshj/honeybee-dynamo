<Workspace Category="Ladybug.6 | Developers" Description="Code Developers of Ladybug and Honeybee can use this component to export Ladybug/Honeybee user objects and source code that they create to the Github folder on their computer.
This eases and automates the steps before commiting new components to the Github.
This component was written thanks to Giulio Piacentino a really helpful example.
-
Provided by Ladybug 0.0.63" ID="8f61c8c1-5225-431d-871a-142508f4b679" Name="Export Ladybug" Version="1.2.0.2690" X="400" Y="-100" zoom="0.5">
  <NamespaceResolutionMap/>
  <Elements>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="&quot;Ladybug&quot;;&#xA;&quot;exportladybug_node.py&quot;;" ShouldFocus="false" guid="81d9c520-0c8f-4891-92bf-074fce261244" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="input python script" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="-750" y="390"/>
    <PythonNodeModels.PythonNode guid="6e3993b3-becd-4af8-8e8b-25948ae490ae" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="import and prepare py code" type="PythonNodeModels.PythonNode" x="-355" y="385">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Find packages from Dynamo folder and prepare the code.&quot;&quot;&quot;
import clr
from System import AppDomain, Environment, IO

def tryGetPluginPath(plugin):
    &quot;&quot;&quot;Try to get path to plugin folder.&quot;&quot;&quot;
    clr.AddReference('ProtoGeometry')
    _loc = tuple(a.Location
                 for a in AppDomain.CurrentDomain.GetAssemblies()
                 if 'ProtoGeometry' in a.FullName)

    try:
        _ver = float(_loc[0].split('\\')[-2])
    except:
        _ver = float(_loc[0].split('\\')[-2].split(' ')[-1])

    assert _ver &gt;= 1.2, 'You need Dynamo 1.2 or higher to use this plugin!'

    _appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
    _dynamoPath = ('\\').join(_loc[0].split('\\')[-4:-1])
    # if the assembly is cached put Revit folder first, and then try to load it from core
    _dynamoPaths = (_dynamoPath.replace('Dynamo Core', 'Dynamo Revit'),
                    _dynamoPath.replace('Dynamo Revit', 'Dynamo Core'))
    _settingsFilename = 'DynamoSettings.xml'

    pkf = []
    for path in _dynamoPaths:
        settingsFile = IO.Path.Combine(_appdata, path, _settingsFilename)
        if IO.File.Exists(settingsFile):
            with open(settingsFile, 'rb') as outf:
                for line in outf:
                    if line.strip().startswith('&lt;CustomPackageFolders&gt;'):
                        for l in outf:
                            if l.strip().startswith('&lt;/CustomPackageFolders&gt;'):
                                break
                            else:
                                pkf.append(l.replace('&lt;/string&gt;', '').replace('&lt;string&gt;', '').strip())

    for p in pkf:
        pp = IO.Path.Combine(p, 'packages', plugin, 'extra')
        # In case of custom folders user may put honeybee under the root folder
        ppp = IO.Path.Combine(p, plugin, 'extra')
        if IO.Directory.Exists(pp):
            return pp
        elif IO.Directory.Exists(ppp):
            return ppp


try:
    plugin, filename = IN

    p = tryGetPluginPath(plugin)

    if not p:
        raise ImportError('{} is not installed! Install it from package manager.'.format(plugin))

	# import the file and wrap it into sys.append
    f = IO.Path.Combine(p, 'nodesrc', filename)
    with open(f, 'rb') as inf:
        source = '    '.join(inf.readlines())

    header = 'try:\n    import sys\n' + \
        '    sys.path.append(r\'{}\')\n\n'.format(p) + \
        '    sys.path.append(r\'C:\Program Files (x86)\IronPython 2.7\Lib\')\n\n' + \
        '    '

    footer = '\nexcept Exception, e:\n' + \
        '    import traceback\n' + \
        '    OUT = &quot;ERROR:\\n\\t{}&quot;.format(str(e)) + \\\n' + \
        '    &quot;\\n\\nIf you think this is a bug submit an issue on github.\\n&quot; + \\\n' + \
        '    &quot;https://github.com/ladybug-tools/honeybee-dynamo/issues\\n&quot; +  \\\n' + \
        '    &quot;and include below error message:\\n\\n&quot; + \\\n' + \
        '    &quot;{}&quot;.format(traceback.format_exc())\n'

    OUT = header + source + footer

except Exception, e:
    import sys
    sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')
    import traceback
    OUT = &quot;ERROR:\n\t{}&quot;.format(str(e)) + \
        &quot;\n\nIf you think this is a bug submit an issue on github.\n&quot; + \
        &quot;https://github.com/ladybug-tools/honeybee-dynamo/issues\n&quot; +  \
        &quot;and include below error message:\n\n&quot; + \
        &quot;{}&quot;.format(traceback.format_exc())

      </Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonStringNode guid="2c2d7a21-2fa0-406d-a3a9-5cdc8e57fe3a" inputcount="4" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="core" type="PythonNodeModels.PythonStringNode" x="-75" y="460">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <PortInfo default="false" index="2"/>
      <PortInfo default="false" index="3"/>
    </PythonNodeModels.PythonStringNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="ef5f376f-1bf5-4aef-9020-48661ecea7d2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_components" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="475">
      <Symbol value="// Any output from a new Ladybug (or Honeybee) component that you wish to export. Right now, only one component can be connected at a time but you can input a &quot;*&quot; (without quotation marsk) to search all changed Ladybug components on a dynamo canvas.&#xD;&#xA;_components: var[];"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="264e892d-4862-49cb-a6a5-abcfd0663709" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_targetFolder" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="570">
      <Symbol value="// A file path on your system which you would like to export the user object and source code to.  For most code developers, this file path will lead to their Github folder for Ladybug (or Honeybee), which is usually installed in &quot;My Documents&quot; by default. Exported source code will be saved at .\src and exported userObjects will be saved at .\userObjects in this _targetFolder.&#xD;&#xA;_targetFolder: string = &quot;C:\Users\Mostapha\Documents\code\ladybug-tools\butterfly-plus\plugin\grasshopper&quot;;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="98329917-5f10-42b7-ae0e-faf4023469a2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_export" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="665">
      <Symbol value="// Set to &quot;True&quot; to export Ladybug (or Honeybee) components to the _targerFolder.&#xD;&#xA;_export: var = False;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="" ShouldFocus="false" guid="3c10c3f6-3b4a-473a-ba91-bdb124fbd1b3" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="decompose outputs" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="150" y="515"/>
    <PythonNodeModels.PythonNode guid="11d3df5a-9ba5-4a04-925c-a9589b0affd2" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="Error report" type="PythonNodeModels.PythonNode" x="150" y="380">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Report errors&quot;&quot;&quot;
importErr, runErr = IN
errors = []

if importErr and str(importErr).startswith(&quot;ERROR:&quot;):
    errors.append(importErr)

if runErr and str(runErr).startswith(&quot;ERROR:&quot;):
    errors.append(runErr)

if len(errors)==0:
    OUT = &quot;All good! Vvizzzz.&quot;
else:
    OUT = &quot;\n&quot;.join(errors)

      </Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="81c1d79b-bddb-4f57-b033-5300978eccef" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="ERRReport" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="380">
      <Symbol value="// Report&#xD;&#xA;ERRReport;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel end="6e3993b3-becd-4af8-8e8b-25948ae490ae" end_index="0" portType="0" start="81d9c520-0c8f-4891-92bf-074fce261244" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="6e3993b3-becd-4af8-8e8b-25948ae490ae" end_index="1" portType="0" start="81d9c520-0c8f-4891-92bf-074fce261244" start_index="1"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c2d7a21-2fa0-406d-a3a9-5cdc8e57fe3a" end_index="0" portType="0" start="6e3993b3-becd-4af8-8e8b-25948ae490ae" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c2d7a21-2fa0-406d-a3a9-5cdc8e57fe3a" end_index="1" portType="0" start="ef5f376f-1bf5-4aef-9020-48661ecea7d2" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c2d7a21-2fa0-406d-a3a9-5cdc8e57fe3a" end_index="2" portType="0" start="264e892d-4862-49cb-a6a5-abcfd0663709" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c2d7a21-2fa0-406d-a3a9-5cdc8e57fe3a" end_index="3" portType="0" start="98329917-5f10-42b7-ae0e-faf4023469a2" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="3c10c3f6-3b4a-473a-ba91-bdb124fbd1b3" end_index="0" portType="0" start="2c2d7a21-2fa0-406d-a3a9-5cdc8e57fe3a" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="11d3df5a-9ba5-4a04-925c-a9589b0affd2" end_index="0" portType="0" start="6e3993b3-becd-4af8-8e8b-25948ae490ae" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="11d3df5a-9ba5-4a04-925c-a9589b0affd2" end_index="1" portType="0" start="2c2d7a21-2fa0-406d-a3a9-5cdc8e57fe3a" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="81c1d79b-bddb-4f57-b033-5300978eccef" end_index="0" portType="0" start="11d3df5a-9ba5-4a04-925c-a9589b0affd2" start_index="0"/>
  </Connectors>
  <Notes/>
  <Annotations/>
  <Presets/>
  <Cameras>
    <Camera Name="Background Preview" eyeX="-34.00" eyeY="-34.00" eyeZ="21.19" lookX="-14.19" lookY="-43.06" lookZ="-41.65" upX="-0.17" upY="0.85" upZ="-0.50"/>
  </Cameras>
</Workspace>
