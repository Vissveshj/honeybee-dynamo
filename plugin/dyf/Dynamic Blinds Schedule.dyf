<Workspace Category="Honeybee.04 :: Daylight :: Daylight" Description="Dynamic Blinds Schedule
-" ID="8f3352af-e5d5-47fe-a7a5-b93db71b1aaf" Name="Dynamic Blinds Schedule" Version="1.2.0.2690" X="400" Y="-100" zoom="0.5">
  <NamespaceResolutionMap/>
  <Elements>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="&quot;Honeybee&quot;;&#xA;&quot;dynblindschd_node.py&quot;;" ShouldFocus="false" guid="6b738af4-f3d0-4835-b518-3f667517758b" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="input python script" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="-750" y="390"/>
    <PythonNodeModels.PythonNode guid="1c9e9367-96a8-4c18-bed5-3c76792c6eab" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="import and prepare py code" type="PythonNodeModels.PythonNode" x="-355" y="385">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Find packages from Dynamo folder and prepare the code.&quot;&quot;&quot;
import clr
from System import AppDomain, Environment, IO

def tryGetPluginPath(plugin):
    &quot;&quot;&quot;Try to get path to plugin folder.&quot;&quot;&quot;
    clr.AddReference('ProtoGeometry')
    _loc = tuple(a.Location
                 for a in AppDomain.CurrentDomain.GetAssemblies()
                 if 'ProtoGeometry' in a.FullName)

    try:
        _ver = float(_loc[0].split('\\')[-2])
    except:
        _ver = float(_loc[0].split('\\')[-2].split(' ')[-1])

    assert _ver &gt;= 1.2, 'You need Dynamo 1.2 or higher to use this plugin!'

    _appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
    _dynamoPath = ('\\').join(_loc[0].split('\\')[-4:-1])
    # if the assembly is cached put Revit folder first, and then try to load it from core
    _dynamoPaths = (_dynamoPath.replace('Dynamo Core', 'Dynamo Revit'),
                    _dynamoPath.replace('Dynamo Revit', 'Dynamo Core'))
    _settingsFilename = 'DynamoSettings.xml'

    pkf = []
    for path in _dynamoPaths:
        settingsFile = IO.Path.Combine(_appdata, path, _settingsFilename)
        if IO.File.Exists(settingsFile):
            with open(settingsFile, 'rb') as outf:
                for line in outf:
                    if line.strip().startswith('&lt;CustomPackageFolders&gt;'):
                        for l in outf:
                            if l.strip().startswith('&lt;/CustomPackageFolders&gt;'):
                                break
                            else:
                                pkf.append(l.replace('&lt;/string&gt;', '').replace('&lt;string&gt;', '').strip())

    for p in pkf:
        pp = IO.Path.Combine(p, 'packages', plugin, 'extra')
        # In case of custom folders user may put honeybee under the root folder
        ppp = IO.Path.Combine(p, plugin, 'extra')
        if IO.Directory.Exists(pp):
            return pp
        elif IO.Directory.Exists(ppp):
            return ppp


try:
    plugin, filename = IN

    p = tryGetPluginPath(plugin)

    if not p:
        raise ImportError('{} is not installed! Install it from package manager.'.format(plugin))

	# import the file and wrap it into sys.append
    f = IO.Path.Combine(p, 'nodesrc', filename)
    with open(f, 'rb') as inf:
        source = '    '.join(inf.readlines())

    header = 'try:\n    import sys\n' + \
        '    sys.path.append(r\'{}\')\n\n'.format(p) + \
        '    sys.path.append(r\'C:\Program Files (x86)\IronPython 2.7\Lib\')\n\n' + \
        '    '

    footer = '\nexcept Exception, e:\n' + \
        '    import traceback\n' + \
        '    OUT = &quot;ERROR:\\n\\t{}&quot;.format(str(e)) + \\\n' + \
        '    &quot;\\n\\nIf you think this is a bug submit an issue on github.\\n&quot; + \\\n' + \
        '    &quot;https://github.com/ladybug-tools/honeybee-dynamo/issues\\n&quot; +  \\\n' + \
        '    &quot;and include below error message:\\n\\n&quot; + \\\n' + \
        '    &quot;{}&quot;.format(traceback.format_exc())\n'

    OUT = header + source + footer

except Exception, e:
    import sys
    sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')
    import traceback
    OUT = &quot;ERROR:\n\t{}&quot;.format(str(e)) + \
        &quot;\n\nIf you think this is a bug submit an issue on github.\n&quot; + \
        &quot;https://github.com/ladybug-tools/honeybee-dynamo/issues\n&quot; +  \
        &quot;and include below error message:\n\n&quot; + \
        &quot;{}&quot;.format(traceback.format_exc())

      </Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonStringNode guid="2c600f4a-a100-4fe5-a2fa-95600c5c40e1" inputcount="5" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="core" type="PythonNodeModels.PythonStringNode" x="-75" y="460">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <PortInfo default="false" index="2"/>
      <PortInfo default="false" index="3"/>
      <PortInfo default="false" index="4"/>
    </PythonNodeModels.PythonStringNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="83f494c8-dec5-4a1c-9440-6936e729c905" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_sensor" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="475">
      <Symbol value="// A single sensor from the analsysi Grid.&#xD;&#xA;_sensor: var;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="7f7a56a8-a9a4-47a0-b784-dbd701bcda02" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_blindStates_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="570">
      <Symbol value="// Suggested window groups states combinations. Default is&#xD;&#xA;// the longest combination between all the window groups.&#xD;&#xA;_blindStates_: var[] = {};"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="ac0a08ed-0fc7-4f49-85bd-469a1da3e668" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_logic_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="665">
      <Symbol value="// Blinds logic. You can use ill, ill_dir and h(our) as input&#xD;&#xA;// values. Default is ill &gt; 3000. You can also overwrite the logic&#xD;&#xA;// by opening the components and edit 'checkLogic' function.&#xD;&#xA;_logic_: string = null;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="1822205d-afe1-41b0-b43a-7523e5ee3d04" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="data_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="760">
      <Symbol value="// optional data to pass along side the values which can be used&#xD;&#xA;// to set-up the logic. This input yet needs to be tested.&#xD;&#xA;data_: var[] = {};"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="out[0];&#xA;out[1];&#xA;out[2];&#xA;out[3];&#xA;out[4];" ShouldFocus="false" guid="4681f7c1-d80f-41be-9a0a-09c5a30c350d" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="decompose outputs" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="150" y="515"/>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="7709e0ae-132b-44ae-9243-3b2f684fb718" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="blindStates" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="475">
      <Symbol value="// Selected blind states based on input logic.&#xD;&#xA;blindStates;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="5da6150b-994b-4818-9366-4cc5ac75fea8" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="blindStIndex" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="570">
      <Symbol value="// Index of selected blind state from input _blindStates_.&#xD;&#xA;blindStIndex;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="21ef206f-40a0-4678-b673-e403ed9d29d6" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="illumTotal" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="665">
      <Symbol value="// Sensor total illuminance values.&#xD;&#xA;illumTotal;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="1daad274-fa07-4f34-b75b-eadc19e7e2ff" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="illumDirect" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="760">
      <Symbol value="// Sensor direct illuminance values. This value won't be available&#xD;&#xA;// for 3-Phase recipe.&#xD;&#xA;illumDirect;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="1de8309f-dbb5-4161-bdb1-3e54b8c95629" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="success" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="855">
      <Symbol value="// A boolean that shows if the logic is satisfied by using the current&#xD;&#xA;// combinations of shadings.&#xD;&#xA;success;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="95efde9f-400f-4cb2-af2f-5f7821fa7890" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="Error report" type="PythonNodeModels.PythonNode" x="150" y="380">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Report errors&quot;&quot;&quot;
importErr, runErr = IN
errors = []

if importErr and str(importErr).startswith(&quot;ERROR:&quot;):
    errors.append(importErr)

if runErr and str(runErr).startswith(&quot;ERROR:&quot;):
    errors.append(runErr)

if len(errors)==0:
    OUT = &quot;All good! Vvizzzz.&quot;
else:
    OUT = &quot;\n&quot;.join(errors)

      </Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="767f493f-e640-49fe-9c52-1b3e5b48144a" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="ERRReport" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="380">
      <Symbol value="// Report&#xD;&#xA;ERRReport;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel end="1c9e9367-96a8-4c18-bed5-3c76792c6eab" end_index="0" portType="0" start="6b738af4-f3d0-4835-b518-3f667517758b" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="1c9e9367-96a8-4c18-bed5-3c76792c6eab" end_index="1" portType="0" start="6b738af4-f3d0-4835-b518-3f667517758b" start_index="1"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c600f4a-a100-4fe5-a2fa-95600c5c40e1" end_index="0" portType="0" start="1c9e9367-96a8-4c18-bed5-3c76792c6eab" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c600f4a-a100-4fe5-a2fa-95600c5c40e1" end_index="1" portType="0" start="83f494c8-dec5-4a1c-9440-6936e729c905" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c600f4a-a100-4fe5-a2fa-95600c5c40e1" end_index="2" portType="0" start="7f7a56a8-a9a4-47a0-b784-dbd701bcda02" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c600f4a-a100-4fe5-a2fa-95600c5c40e1" end_index="3" portType="0" start="ac0a08ed-0fc7-4f49-85bd-469a1da3e668" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="2c600f4a-a100-4fe5-a2fa-95600c5c40e1" end_index="4" portType="0" start="1822205d-afe1-41b0-b43a-7523e5ee3d04" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="4681f7c1-d80f-41be-9a0a-09c5a30c350d" end_index="0" portType="0" start="2c600f4a-a100-4fe5-a2fa-95600c5c40e1" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="7709e0ae-132b-44ae-9243-3b2f684fb718" end_index="0" portType="0" start="4681f7c1-d80f-41be-9a0a-09c5a30c350d" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="5da6150b-994b-4818-9366-4cc5ac75fea8" end_index="0" portType="0" start="4681f7c1-d80f-41be-9a0a-09c5a30c350d" start_index="1"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="21ef206f-40a0-4678-b673-e403ed9d29d6" end_index="0" portType="0" start="4681f7c1-d80f-41be-9a0a-09c5a30c350d" start_index="2"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="1daad274-fa07-4f34-b75b-eadc19e7e2ff" end_index="0" portType="0" start="4681f7c1-d80f-41be-9a0a-09c5a30c350d" start_index="3"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="1de8309f-dbb5-4161-bdb1-3e54b8c95629" end_index="0" portType="0" start="4681f7c1-d80f-41be-9a0a-09c5a30c350d" start_index="4"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="95efde9f-400f-4cb2-af2f-5f7821fa7890" end_index="0" portType="0" start="1c9e9367-96a8-4c18-bed5-3c76792c6eab" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="95efde9f-400f-4cb2-af2f-5f7821fa7890" end_index="1" portType="0" start="2c600f4a-a100-4fe5-a2fa-95600c5c40e1" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="767f493f-e640-49fe-9c52-1b3e5b48144a" end_index="0" portType="0" start="95efde9f-400f-4cb2-af2f-5f7821fa7890" start_index="0"/>
  </Connectors>
  <Notes/>
  <Annotations/>
  <Presets/>
  <Cameras>
    <Camera Name="Background Preview" eyeX="-34.00" eyeY="-34.00" eyeZ="21.19" lookX="-14.19" lookY="-43.06" lookZ="-41.65" upX="-0.17" upY="0.85" upZ="-0.50"/>
  </Cameras>
</Workspace>
