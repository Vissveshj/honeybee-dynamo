<Workspace Category="Honeybee.00 :: Create" Description="Honeybee Surface
-" ID="acf0d6b2-b423-4a2f-80f6-161c23318235" Name="Honeybee Surface" Version="1.2.0.2690" X="400" Y="-100" zoom="0.5">
  <NamespaceResolutionMap/>
  <Elements>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="&quot;Honeybee&quot;;&#xA;&quot;hbsurface_node.py&quot;;" ShouldFocus="false" guid="c57302ba-d668-468d-8354-e6421ab40f5f" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="input python script" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="-750" y="390"/>
    <PythonNodeModels.PythonNode guid="ce263b58-8dc0-4445-9fdc-32211155d9b7" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="import and prepare py code" type="PythonNodeModels.PythonNode" x="-355" y="385">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Find packages from Dynamo folder and prepare the code.&quot;&quot;&quot;
import clr
from System import AppDomain, Environment, IO

def tryGetPluginPath(plugin):
    &quot;&quot;&quot;Try to get path to plugin folder.&quot;&quot;&quot;
    clr.AddReference('ProtoGeometry')
    _loc = tuple(a.Location
                 for a in AppDomain.CurrentDomain.GetAssemblies()
                 if 'ProtoGeometry' in a.FullName)

    try:
        _ver = float(_loc[0].split('\\')[-2])
    except:
        _ver = float(_loc[0].split('\\')[-2].split(' ')[-1])

    assert _ver &gt;= 1.2, 'You need Dynamo 1.2 or higher to use this plugin!'

    _appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
    _dynamoPath = ('\\').join(_loc[0].split('\\')[-4:-1])
    # if the assembly is cached put Revit folder first, and then try to load it from core
    _dynamoPaths = (_dynamoPath.replace('Dynamo Core', 'Dynamo Revit'),
                    _dynamoPath.replace('Dynamo Revit', 'Dynamo Core'))
    _settingsFilename = 'DynamoSettings.xml'

    pkf = []
    for path in _dynamoPaths:
        settingsFile = IO.Path.Combine(_appdata, path, _settingsFilename)
        if IO.File.Exists(settingsFile):
            with open(settingsFile, 'rb') as outf:
                for line in outf:
                    if line.strip().startswith('&lt;CustomPackageFolders&gt;'):
                        for l in outf:
                            if l.strip().startswith('&lt;/CustomPackageFolders&gt;'):
                                break
                            else:
                                pkf.append(l.replace('&lt;/string&gt;', '').replace('&lt;string&gt;', '').strip())

    for p in pkf:
        pp = IO.Path.Combine(p, 'packages', plugin, 'extra')
        # In case of custom folders user may put honeybee under the root folder
        ppp = IO.Path.Combine(p, plugin, 'extra')
        if IO.Directory.Exists(pp):
            return pp
        elif IO.Directory.Exists(ppp):
            return ppp


try:
    plugin, filename = IN

    p = tryGetPluginPath(plugin)

    if not p:
        raise ImportError('{} is not installed! Install it from package manager.'.format(plugin))

	# import the file and wrap it into sys.append
    f = IO.Path.Combine(p, 'nodesrc', filename)
    with open(f, 'rb') as inf:
        source = '    '.join(inf.readlines())

    header = 'try:\n    import sys\n' + \
        '    sys.path.append(r\'{}\')\n\n'.format(p) + \
        '    sys.path.append(r\'C:\Program Files (x86)\IronPython 2.7\Lib\')\n\n' + \
        '    '

    footer = '\nexcept Exception, e:\n' + \
        '    import traceback\n' + \
        '    OUT = &quot;ERROR:\\n\\t{}&quot;.format(str(e)) + \\\n' + \
        '    &quot;\\n\\nIf you think this is a bug submit an issue on github.\\n&quot; + \\\n' + \
        '    &quot;https://github.com/ladybug-tools/honeybee-dynamo/issues\\n&quot; +  \\\n' + \
        '    &quot;and include below error message:\\n\\n&quot; + \\\n' + \
        '    &quot;{}&quot;.format(traceback.format_exc())\n'

    OUT = header + source + footer

except Exception, e:
    import sys
    sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')
    import traceback
    OUT = &quot;ERROR:\n\t{}&quot;.format(str(e)) + \
        &quot;\n\nIf you think this is a bug submit an issue on github.\n&quot; + \
        &quot;https://github.com/ladybug-tools/honeybee-dynamo/issues\n&quot; +  \
        &quot;and include below error message:\n\n&quot; + \
        &quot;{}&quot;.format(traceback.format_exc())

      </Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonStringNode guid="e1f5262c-52d6-4158-a32e-f2e741853879" inputcount="5" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="core" type="PythonNodeModels.PythonStringNode" x="-75" y="460">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <PortInfo default="false" index="2"/>
      <PortInfo default="false" index="3"/>
      <PortInfo default="false" index="4"/>
    </PythonNodeModels.PythonStringNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="0220c4c5-72f4-427b-8a4b-eb22219db874" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_geo" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="475">
      <Symbol value="// A list of input geometries.&#xD;&#xA;_geo: Autodesk.Geometry[];"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="0ee2bacc-7f06-48a6-824d-23933f1de05b" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="names_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="570">
      <Symbol value="// A name or a list of names for input geometry. If the name is not&#xD;&#xA;// provided Honeybee will assign a random name to the surface.&#xD;&#xA;names_: string[] = {};"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="d36520fb-52c9-4cde-9f02-3b7a990a36c7" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_type_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="665">
      <Symbol value="// Surface type. Surface type will be used to set the material and&#xD;&#xA;// construction for the surface if they are not assigned by user.&#xD;&#xA;// 0   Wall           0.5 UndergroundWall&#xD;&#xA;// 1   Roof           1.5 UndergroundCeiling&#xD;&#xA;// 2   Floor          2.25 UndergroundSlab&#xD;&#xA;// 2.5 SlabOnGrade    2.75 ExposedFloor&#xD;&#xA;// 3   Ceiling        4   AirWall&#xD;&#xA;// 5   Window         6   Context&#xD;&#xA;_type_: int = null;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="9a018824-a021-4be8-9b38-8ed4727a6630" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="radMat_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="760">
      <Symbol value="// Radiance material. If radiance matrial is not provided the component&#xD;&#xA;// will use the type to assign the default material for the surface. If type&#xD;&#xA;// is also not assigned by user. Honeybee will guess the type of the surface&#xD;&#xA;// based on surface normal vector direction at the center of the surface.&#xD;&#xA;radMat_: var = null;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="out[0];" ShouldFocus="false" guid="e465e606-bb10-4b31-a68c-98984f9828ac" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="decompose outputs" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="150" y="515"/>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="6984ef60-95ef-43a2-8ea4-7542558735a9" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="HBSrf" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="475">
      <Symbol value="// Honeybee surface. Use this surface directly for daylight simulation&#xD;&#xA;// or to create a Honeybee zone for Energy analysis.&#xD;&#xA;HBSrf;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="71b55caa-1554-41ec-8842-e1e50e0629ee" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="Error report" type="PythonNodeModels.PythonNode" x="150" y="380">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Report errors&quot;&quot;&quot;
importErr, runErr = IN
errors = []

if importErr and str(importErr).startswith(&quot;ERROR:&quot;):
    errors.append(importErr)

if runErr and str(runErr).startswith(&quot;ERROR:&quot;):
    errors.append(runErr)

if len(errors)==0:
    OUT = &quot;All good! Vvizzzz.&quot;
else:
    OUT = &quot;\n&quot;.join(errors)

      </Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="03cc6227-99fd-4014-901c-94bd0e661862" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="ERRReport" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="380">
      <Symbol value="// Report&#xD;&#xA;ERRReport;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel end="ce263b58-8dc0-4445-9fdc-32211155d9b7" end_index="0" portType="0" start="c57302ba-d668-468d-8354-e6421ab40f5f" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="ce263b58-8dc0-4445-9fdc-32211155d9b7" end_index="1" portType="0" start="c57302ba-d668-468d-8354-e6421ab40f5f" start_index="1"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="e1f5262c-52d6-4158-a32e-f2e741853879" end_index="0" portType="0" start="ce263b58-8dc0-4445-9fdc-32211155d9b7" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="e1f5262c-52d6-4158-a32e-f2e741853879" end_index="1" portType="0" start="0220c4c5-72f4-427b-8a4b-eb22219db874" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="e1f5262c-52d6-4158-a32e-f2e741853879" end_index="2" portType="0" start="0ee2bacc-7f06-48a6-824d-23933f1de05b" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="e1f5262c-52d6-4158-a32e-f2e741853879" end_index="3" portType="0" start="d36520fb-52c9-4cde-9f02-3b7a990a36c7" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="e1f5262c-52d6-4158-a32e-f2e741853879" end_index="4" portType="0" start="9a018824-a021-4be8-9b38-8ed4727a6630" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="e465e606-bb10-4b31-a68c-98984f9828ac" end_index="0" portType="0" start="e1f5262c-52d6-4158-a32e-f2e741853879" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="6984ef60-95ef-43a2-8ea4-7542558735a9" end_index="0" portType="0" start="e465e606-bb10-4b31-a68c-98984f9828ac" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="71b55caa-1554-41ec-8842-e1e50e0629ee" end_index="0" portType="0" start="ce263b58-8dc0-4445-9fdc-32211155d9b7" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="71b55caa-1554-41ec-8842-e1e50e0629ee" end_index="1" portType="0" start="e1f5262c-52d6-4158-a32e-f2e741853879" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="03cc6227-99fd-4014-901c-94bd0e661862" end_index="0" portType="0" start="71b55caa-1554-41ec-8842-e1e50e0629ee" start_index="0"/>
  </Connectors>
  <Notes/>
  <Annotations/>
  <Presets/>
  <Cameras>
    <Camera Name="Background Preview" eyeX="-34.00" eyeY="-34.00" eyeZ="21.19" lookX="-14.19" lookY="-43.06" lookZ="-41.65" upX="-0.17" upY="0.85" upZ="-0.50"/>
  </Cameras>
</Workspace>
